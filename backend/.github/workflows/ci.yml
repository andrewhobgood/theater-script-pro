name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: theater_script_pro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/theater_script_pro_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          DJANGO_SETTINGS_MODULE: theater_script_pro.settings.test
        run: |
          python manage.py migrate
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/theater_script_pro_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          DJANGO_SETTINGS_MODULE: theater_script_pro.settings.test
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run Black formatter check
        run: |
          black --check .
      
      - name: Run isort import sorter check
        run: |
          isort --check-only .
      
      - name: Run Flake8 linter
        run: |
          flake8 .
      
      - name: Run pylint
        run: |
          pylint $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./migrations/*") || true
      
      - name: Run mypy type checker
        run: |
          mypy . || true

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install safety bandit
      
      - name: Run Safety security check
        run: |
          safety check --json || true
      
      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Run Django security check
        env:
          SECRET_KEY: test-secret-key
          DJANGO_SETTINGS_MODULE: theater_script_pro.settings.test
        run: |
          python manage.py check --deploy --fail-level WARNING || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Collect static files
        env:
          SECRET_KEY: build-secret-key
          DJANGO_SETTINGS_MODULE: theater_script_pro.settings.production
        run: |
          python manage.py collectstatic --noinput
      
      - name: Check Django project
        env:
          SECRET_KEY: build-secret-key
          DJANGO_SETTINGS_MODULE: theater_script_pro.settings.production
        run: |
          python manage.py check
      
      - name: Build Docker image
        run: |
          docker build -t theater-script-pro:${{ github.sha }} .
      
      - name: Save Docker image
        run: |
          docker save theater-script-pro:${{ github.sha }} > theater-script-pro.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: theater-script-pro.tar
          retention-days: 1